        -:    0:Source:main.cpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:#include <bits/stdc++.h>
        -:    2:
        -:    3:using namespace std;
        -:    4:
        -:    5:vector<float> x1 = {
        -:    6:        1.0, 0.7, 1.2, 0.7, 1.2,
        -:    7:    };
        -:    8:vector<float> w1 = {0.5, 1.5, 0.8, 0.9, -1.7, 1.6, 0.5, 1.5, 0.8, 0.9, -1.7, 1.6};
        -:    9:vector<float> w2 = {0.8, 0.2, -1.6, 1.2, 2.1, -0.2, 0.8, 0.2, -1.6, 1.2, 2.1, -0.2,};
        -:   10:
        -:   11:vector<vector<float>> w;
        -:   12:vector<float> x;
        -:   13:
        -:   14:vector<float> _true = {1, 0};
        -:   15:vector<int> loss;
        -:   16:
function _Z18mean_squared_errorSt6vectorIfSaIfEES1_ called 5000 returned 100% blocks executed 100%
     5000:   17:float mean_squared_error(vector<float> y, vector<float> y_pred) {
     5000:   18:    int n = y.size();
call    0 returned 5000
     5000:   19:    float sum = 0;
    15000:   20:    for (int i = 0; i < n; i++) {
branch  0 taken 10000 (fallthrough)
branch  1 taken 5000
    10000:   21:        sum += pow((y[i] - y_pred[i]), 2);
call    0 returned 10000
call    1 returned 10000
call    2 returned 10000
        -:   22:    }
     5000:   23:    return sum / n;
        -:   24:}
        -:   25:
function main called 1 returned 100% blocks executed 76%
        1:   26:int main() {
        1:   27:    w.push_back(w1);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   28:    w.push_back(w2);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    30001:   29:    for (int i = 0; i < 30000; i++) {
branch  0 taken 30000 (fallthrough)
branch  1 taken 1
   390000:   30:        for (auto e: w1) {
call    0 returned 30000
call    1 returned 30000
call    2 returned 390000
branch  3 taken 360000 (fallthrough)
branch  4 taken 30000
call    5 returned 360000
call    6 returned 360000
   360000:   31:            w[0].push_back(e);
call    0 returned 360000
call    1 returned 360000
branch  2 taken 360000 (fallthrough)
branch  3 taken 0 (throw)
        -:   32:        }
   390000:   33:        for (auto e: w2) {
call    0 returned 30000
call    1 returned 30000
call    2 returned 390000
branch  3 taken 360000 (fallthrough)
branch  4 taken 30000
call    5 returned 360000
call    6 returned 360000
   360000:   34:            w[1].push_back(e);
call    0 returned 360000
call    1 returned 360000
branch  2 taken 360000 (fallthrough)
branch  3 taken 0 (throw)
        -:   35:        }
   180000:   36:        for (auto e: x1) {
call    0 returned 30000
call    1 returned 30000
call    2 returned 180000
branch  3 taken 150000 (fallthrough)
branch  4 taken 30000
call    5 returned 150000
call    6 returned 150000
   150000:   37:            x.push_back(e);
call    0 returned 150000
branch  1 taken 150000 (fallthrough)
branch  2 taken 0 (throw)
        -:   38:        }
        -:   39:    }
        1:   40:    int lenx = x.size();
call    0 returned 1
        1:   41:    int lenw = w.size();
call    0 returned 1
        1:   42:    cout << w[0].size() << endl;
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   43:    cout << lenx << endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        2:   44:    vector<float> layer2;
call    0 returned 1
call    1 returned 1
call    2 never executed
        2:   45:    vector<float> layer1 = {1};
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 never executed
        -:   46:    int iter;
     5001:   47:    for (iter = 0; iter < 5000; iter++) {
branch  0 taken 5000 (fallthrough)
branch  1 taken 1
     5000:   48:        layer1 = {1};
call    0 returned 5000
branch  1 taken 5000 (fallthrough)
branch  2 taken 0 (throw)
     5000:   49:        layer2 = {};
call    0 returned 5000
branch  1 taken 5000 (fallthrough)
branch  2 taken 0 (throw)
    15000:   50:        for (int j = 0; j < lenw; j++) {
branch  0 taken 10000 (fallthrough)
branch  1 taken 5000
    10000:   51:            float sum = 0;
1500010000:   52:            for (int i = 0; i < lenx; i++) {
branch  0 taken 1500000000 (fallthrough)
branch  1 taken 10000
1500000000:   53:                sum += x[i] * w[j][i];
call    0 returned 1500000000
call    1 returned 1500000000
call    2 returned 1500000000
        -:   54:            }
    10000:   55:            layer1.push_back(1 / (1 + exp(-sum)));
call    0 returned 10000
call    1 returned 10000
branch  2 taken 10000 (fallthrough)
branch  3 taken 0 (throw)
        -:   56:        }
     5000:   57:        int lenlayer1 = layer1.size();
call    0 returned 5000
    15000:   58:        for (int j = 0; j < lenw; j++) {
branch  0 taken 10000 (fallthrough)
branch  1 taken 5000
    10000:   59:            float sum = 0;
    40000:   60:            for (int i = 0; i < lenlayer1; i++) {
branch  0 taken 30000 (fallthrough)
branch  1 taken 10000
    30000:   61:                sum += layer1[i] * w[j][3 + i];
call    0 returned 30000
call    1 returned 30000
call    2 returned 30000
        -:   62:            }
    10000:   63:            layer2.push_back(1 / 1 + exp(-sum));
call    0 returned 10000
call    1 returned 10000
branch  2 taken 10000 (fallthrough)
branch  3 taken 0 (throw)
        -:   64:        }
     5000:   65:        float del12 = (layer2[0] - _true[0]) * layer2[0] * (1 - layer2[0]);
call    0 returned 5000
call    1 returned 5000
call    2 returned 5000
call    3 returned 5000
     5000:   66:        float del22 = (layer2[1] - _true[1]) * layer2[1] * (1 - layer2[1]);
call    0 returned 5000
call    1 returned 5000
call    2 returned 5000
call    3 returned 5000
        -:   67:        float del11 =
     5000:   68:            layer1[1] * (1 - layer1[1]) * ((del12 * w[0][3 + 1]) + (del22 * w[1][3 + 1]));
call    0 returned 5000
call    1 returned 5000
call    2 returned 5000
call    3 returned 5000
call    4 returned 5000
call    5 returned 5000
        -:   69:        float del21 =
     5000:   70:            layer1[2] * (1 - layer1[2]) * ((del12 * w[0][3 + 2]) + (del22 * w[1][3 + 2]));
call    0 returned 5000
call    1 returned 5000
call    2 returned 5000
call    3 returned 5000
call    4 returned 5000
call    5 returned 5000
        -:   71:        vector<vector<float>> delta = {{del11, del21},
    25000:   72:                                       {del12, del22}};
call    0 returned 5000
call    1 returned 5000
branch  2 taken 5000 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 5000
call    5 returned 5000
branch  6 taken 5000 (fallthrough)
branch  7 taken 0 (throw)
call    8 returned 5000
call    9 returned 5000
branch 10 taken 5000 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 10000
call   13 returned 5000
call   14 returned 5000
call   15 never executed
call   16 never executed
        -:   73:
    15000:   74:        for (int i = 0; i < lenw; i++) {
branch  0 taken 10000 (fallthrough)
branch  1 taken 5000
    20000:   75:            for (int j = 0; j < (int)lenw / 2; j++) {
branch  0 taken 10000 (fallthrough)
branch  1 taken 10000
    10000:   76:                w[i][j] -= 0.5 * (delta[0][i] * x[j]);
call    0 returned 10000
call    1 returned 10000
call    2 returned 10000
call    3 returned 10000
call    4 returned 10000
        -:   77:            }
        -:   78:        }
    15000:   79:        for (int i = 0; i < lenw; i++) {
branch  0 taken 10000 (fallthrough)
branch  1 taken 5000
    20000:   80:            for (int j = 0; j < (int)lenw / 2; j++) {
branch  0 taken 10000 (fallthrough)
branch  1 taken 10000
    10000:   81:                w[i][3 + j] -= 0.5 * (delta[1][i] * layer1[j]);
call    0 returned 10000
call    1 returned 10000
call    2 returned 10000
call    3 returned 10000
call    4 returned 10000
        -:   82:            }
        -:   83:        }
     5000:   84:        float val = mean_squared_error(_true, layer2);
call    0 returned 5000
branch  1 taken 5000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 5000
branch  4 taken 5000 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 5000
branch  7 taken 5000 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 5000
call   10 returned 5000
call   11 never executed
call   12 never executed
     5000:   85:        loss.push_back(val);
call    0 returned 5000
branch  1 taken 5000 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 5000
        -:   86:    }
        -:   87:    // cout << "**********************************\n";
        -:   88:    // cout << "Weight Vector after iteration: " << iter + 1 << "\n";
        -:   89:    // for (auto e: w) {
        -:   90:    //     for (auto i: e) {
        -:   91:    //         cout << i << "\t";
        -:   92:    //     }
        -:   93:    //     cout << endl;
        -:   94:    // }
        -:   95:    // cout << "**********************************\n";
        1:   96:}
